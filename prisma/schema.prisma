// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id              String   @id @default(cuid())
  userName        String
  userUsername    String
  userEmail       String
  userImage       String?
  userDescription String?
  userWebsite     String?
  userYoutube     String?
  userInstagram   String?
  userJob         String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  clerkUserId     String?
  admin           Boolean  @default(false)
  invoices          Invoice[] @relation("UserInvoices")
}

model Invoice {
  id            String        @id
  name          String
  issuerName    String        @default("")
  issuerAddress String        @default("")
  clientName    String        @default("")
  clientAddress String        @default("")
  invoiceDate   String        @default("")
  dueDate       String        @default("")
  vatActive     Boolean       @default(false)
  vatRate       Float         @default(20)
  status        Int           @default(1)
  lines         InvoiceLine[] @relation("InvoiceLines")
  userId        String
  createdById   User          @relation("UserInvoices", fields: [userId], references: [id])
}

model InvoiceLine {
  id          String   @id @default(uuid())
  description String   @default("")
  quantity    Int      @default(0)
  unitPrice   Float    @default(0)
  invoiceId   String?
  invoice     Invoice? @relation("InvoiceLines", fields: [invoiceId], references: [id], onDelete: Cascade)
}
